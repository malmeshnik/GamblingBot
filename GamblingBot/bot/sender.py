import asyncio
import mimetypes
import logging
from datetime import datetime
from asgiref.sync import sync_to_async
from aiogram import Bot
from aiogram.types import FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import (
    TelegramForbiddenError,
    TelegramBadRequest,
    TelegramRetryAfter,
)
from django.utils import timezone
from .models import User, ScheduledMessage, MessageAfterStart, UserStatus

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

formatter = logging.Formatter('%(asctime)s [%(levelname)s] [%(name)s] %(message)s')

file_handler = logging.FileHandler('bot_sender.log')
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

def get_keyboard(button_text: str, url: str):
    logger.debug(f"üîò –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ —Ç–µ–∫—Å—Ç–æ–º: {button_text} —Ç–∞ URL: {url}")
    kb = InlineKeyboardBuilder()
    kb.button(text=button_text, url=url)
    return kb.as_markup()

async def send_message_safe(bot: Bot, user, msg_text, keyboard=None, media_file=None, mime=None, send_button=True):
    logger.info(f"üì§ –ü–æ—á–∞—Ç–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.telegram_id}")
    start_time = datetime.now()
    
    if not send_button:
            keyboard = None
            logger.debug("üîò –ö–Ω–æ–ø–∫–∏ –≤–∏–º–∫–Ω–µ–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        
    try:
        if media_file:
            logger.info(f"üìé –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –º–µ–¥—ñ–∞—Ñ–∞–π–ª—É —Ç–∏–ø—É: {mime}")
            if mime and "image" in mime:
                logger.debug("üñº –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
                msg = await bot.send_photo(
                    int(user.telegram_id),
                    media_file,
                    caption=msg_text,
                    reply_markup=keyboard,
                    parse_mode="HTML",
                )
            elif mime and "video" in mime:
                logger.debug("üé• –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–µ–æ")
                msg = await bot.send_video(
                    int(user.telegram_id),
                    media_file,
                    caption=msg_text,
                    reply_markup=keyboard,
                    parse_mode="HTML",
                )
            else:
                logger.debug("üìÑ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                msg = await bot.send_document(
                    int(user.telegram_id),
                    media_file,
                    caption=msg_text,
                    reply_markup=keyboard,
                    parse_mode="HTML",
                )
        else:
            logger.debug("üí¨ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
            msg = await bot.send_message(
                int(user.telegram_id),
                msg_text,
                reply_markup=keyboard,
                parse_mode="HTML",
            )

        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        logger.info(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.telegram_id} –∑–∞ {duration:.2f} —Å–µ–∫")
        
        user.status = UserStatus.ACTIVE
        return msg

    except TelegramForbiddenError as e:
        msg = str(e).lower()
        if "blocked" in msg:
            user.status = UserStatus.BLOCKED
            logger.error(f"üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.telegram_id} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞")
        else:
            user.status = UserStatus.FORBIDDEN
            logger.error(f"‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.telegram_id}")
        logger.warning(f"‚ö†Ô∏è TelegramForbiddenError: {user.telegram_id} –ü–æ–º–∏–ª–∫–∞: {e}")
        
    except TelegramBadRequest as e:
        msg = str(e).lower()
        if "deactivated" in msg:
            user.status = UserStatus.DELETED
            logger.error(f"‚ùå –ê–∫–∞—É–Ω—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.telegram_id} –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ")
        elif "chat not found" in msg:
            user.status = UserStatus.DELETED
            logger.error(f"‚ùå –ß–∞—Ç –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user.telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            user.status = UserStatus.FORBIDDEN
            logger.error(f"‚õî –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.telegram_id}")
        logger.warning(f"üö´ TelegramBadRequest: {user.telegram_id} –ü–æ–º–∏–ª–∫–∞: {e}")
        
    except TelegramRetryAfter as e:
        retry_time = e.retry_after
        logger.warning(f"‚è≥ Flood control –¥–ª—è {user.telegram_id}, –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è {retry_time} —Å–µ–∫")
        await asyncio.sleep(retry_time)
        logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user.telegram_id}")
        return await send_message_safe(
            bot, user, msg_text, keyboard, media_file, mime
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ {user.telegram_id}: {e}", exc_info=True)
        
    finally:
        logger.debug(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.telegram_id}: {user.status}")
        await sync_to_async(user.save)(update_fields=["status"])

    return False

async def send_messages_after_start():
    start_time = datetime.now()
    logger.info("üîÑ –ü–æ—á–∞—Ç–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É")
    
    messages = await sync_to_async(list)(
        ScheduledMessage.objects.filter(
            send_at__lte=timezone.now(), 
            sent=False
        ).select_for_update()
    )
    
    logger.info(f"üì® –ó–Ω–∞–π–¥–µ–Ω–æ {len(messages)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É")

    for msg in messages:
        msg_start = datetime.now()
        logger.info(f"üìù –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ID: {msg.id}")
        
        await sync_to_async(msg.delete)()
        logger.debug(f"üóë –í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ID: {msg.id}")
        
        media_file = FSInputFile(msg.media.path) if msg.media else None
        mime, _ = mimetypes.guess_type(msg.media.path) if msg.media else (None, None)
        
        if media_file:
            logger.info(f"üìé –ú–µ–¥—ñ–∞—Ñ–∞–π–ª: {mime}")

        user = await sync_to_async(lambda: msg.user)()
        bloger = await sync_to_async(lambda: user.bloger)()
        bot = await sync_to_async(lambda: msg.bot)()
        bot_token = bot.token

        if not bloger:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ID {msg.id} - –±–ª–æ–≥–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            continue

        async with Bot(bot_token) as bot_instance:
            keyboard = get_keyboard(msg.button_text, bloger.ref_link_to_site) if bloger else None
            await send_message_safe(bot_instance, user, msg.text, keyboard, media_file, mime)

        msg_duration = (datetime.now() - msg_start).total_seconds()
        logger.info(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {msg.id} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.telegram_id} –∑–∞ {msg_duration:.2f} —Å–µ–∫")

    total_duration = (datetime.now() - start_time).total_seconds()
    logger.info(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É. –ß–∞—Å: {total_duration:.2f} —Å–µ–∫")

async def send_scheduled_messages():
    start_time = datetime.now()
    logger.info("üîÑ –ü–æ—á–∞—Ç–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
    
    messages = await sync_to_async(list)(
        ScheduledMessage.objects.filter(send_at__lte=timezone.now(), sent=False)
    )
    
    logger.info(f"üì® –ó–Ω–∞–π–¥–µ–Ω–æ {len(messages)} –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")

    semaphore = asyncio.Semaphore(10)
    logger.debug(f"üîì –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–µ–º–∞—Ñ–æ—Ä –∑ –ª—ñ–º—ñ—Ç–æ–º: 10")

    async def send_with_limit(user, bot, msg, media_file, mime):
        async with semaphore:
            start = datetime.now()
            logger.debug(f"üë§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.telegram_id}")
            
            bloger = user.bloger
            if not bloger:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.telegram_id} - –±–ª–æ–≥–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
                return

            button_link = msg.button_link or bloger.ref_link_to_site
            keyboard = get_keyboard(msg.button_text, button_link)
            message_text = msg.text.format(name=user.first_name) if "{name}" in msg.text else msg.text
            
            try:
                await send_message_safe(
                    bot,
                    user,
                    message_text,
                    keyboard,
                    media_file,
                    mime,
                    msg.send_button,
                )
                duration = (datetime.now() - start).total_seconds()
                logger.debug(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.telegram_id} –∑–∞ {duration:.2f} —Å–µ–∫")
                await asyncio.sleep(0.2)
                
            except TelegramRetryAfter as e:
                logger.warning(f"‚è≥ Flood limit –¥–ª—è {user.telegram_id}, –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è {e.retry_after} —Å–µ–∫")
                await asyncio.sleep(e.retry_after)
                await send_message_safe(
                    bot,
                    user,
                    message_text,
                    keyboard,
                    media_file,
                    mime,
                    msg.send_button,
                )
                
            except Exception as ex:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.telegram_id}: {ex}", exc_info=True)

    for msg in messages:
        msg_start = datetime.now()
        logger.info(f"üìù –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ID: {msg.id}")
        
        msg.sent = True
        await sync_to_async(msg.save)()
        logger.debug(f"üíæ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {msg.id} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ")

        if await sync_to_async(lambda: msg.folder_id)():
            bots = await sync_to_async(lambda: list(msg.folder.bots.all()))()
            logger.info(f"ü§ñ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ {len(bots)} –±–æ—Ç—ñ–≤ –∑ –ø–∞–ø–∫–∏")
        else:
            bots = [await sync_to_async(lambda: msg.bot)()]
            logger.info("ü§ñ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –±–æ—Ç")

        for bot in bots:

            async with Bot(bot.token) as bot_instance:
                bot_start = datetime.now()
                logger.info(f"ü§ñ –û–±—Ä–æ–±–∫–∞ –±–æ—Ç–∞: {bot.username}")
                
                users = await sync_to_async(list)(
                    User.objects.select_related("bloger")
                    .filter(bot=bot)
                    .distinct()
                )
                
                logger.info(f"üë• –ó–Ω–∞–π–¥–µ–Ω–æ {len(users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –±–æ—Ç–∞ {bot.username}")
                
                media_file = FSInputFile(msg.media.path) if msg.media else None
                mime, _ = mimetypes.guess_type(msg.media.path) if msg.media else (None, None)
                
                if media_file:
                    logger.info(f"üìé –¢–∏–ø –º–µ–¥—ñ–∞—Ñ–∞–π–ª—É: {mime}")

                tasks = [send_with_limit(user, bot_instance, msg, media_file, mime) for user in users]
                chunks = [tasks[i : i + 5] for i in range(0, len(tasks), 5)]
                
                logger.info(f"üì¶ –†–æ–∑–¥—ñ–ª–µ–Ω–æ –Ω–∞ {len(chunks)} —á–∞—Å—Ç–∏–Ω –ø–æ 5 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")

                for i, chunk in enumerate(chunks, 1):
                    chunk_start = datetime.now()
                    logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —á–∞—Å—Ç–∏–Ω–∏ {i}/{len(chunks)} ({len(chunk)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å)")
                    
                    results = await asyncio.gather(*chunk, return_exceptions=True)
                    
                    successful = len([r for r in results if r and not isinstance(r, Exception)])
                    failed = len([r for r in results if isinstance(r, Exception)])
                    
                    chunk_duration = (datetime.now() - chunk_start).total_seconds()
                    logger.info(f"üìä –ß–∞—Å—Ç–∏–Ω–∞ {i}: ‚úÖ –£—Å–ø—ñ—à–Ω–æ: {successful}, ‚ùå –ü–æ–º–∏–ª–æ–∫: {failed}, ‚è± –ß–∞—Å: {chunk_duration:.2f} —Å–µ–∫")
                    
                    await asyncio.sleep(1)
                
                bot_duration = (datetime.now() - bot_start).total_seconds()
                logger.info(f"‚è± –ß–∞—Å —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º {bot.username}: {bot_duration:.2f} —Å–µ–∫")

        msg_duration = (datetime.now() - msg_start).total_seconds()
        logger.info(f"‚è± –ß–∞—Å –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ID {msg.id}: {msg_duration:.2f} —Å–µ–∫")

    total_duration = (datetime.now() - start_time).total_seconds()
    logger.info(f"üèÅ –†–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: {total_duration:.2f} —Å–µ–∫")